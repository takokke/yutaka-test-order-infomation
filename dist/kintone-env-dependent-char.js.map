{"version":3,"file":"kintone-env-dependent-char.js","mappings":"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AAA;YAAA,OAAAoB,QAAA,CAAA/D,IAAA;QAAA;MAAA,GAAAoD,OAAA;IAAA,CAER;IAED,IAAMmC,eAAe,GAAGlE,OAAO,CAACgB,GAAG,CAACmD,yBAAyB,CAAC,CAAC;IAC/DD,eAAe,aAAfA,eAAe,eAAfA,eAAe,CAAEE,WAAW,CAAC1C,MAAM,CAAC;IAEpC,OAAOvB,KAAK;EAChB,CAAC,CAAC;AAEN,CAAC,EAAE,CAAC;;;;;;;;;;AC1SJ;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;UAEA;UACA;;;;;WCzBA;WACA;WACA;WACA;WACA,+BAA+B,wCAAwC;WACvE;WACA;WACA;WACA;WACA,iBAAiB,qBAAqB;WACtC;WACA;WACA,kBAAkB,qBAAqB;WACvC;WACA;WACA,KAAK;WACL;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;;;;WC3BA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,GAAG;WACH;WACA;WACA,CAAC;;;;;WCPD;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;WCNA;;WAEA;WACA;WACA;WACA;WACA;WACA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;;WAEA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,MAAM,qBAAqB;WAC3B;WACA;WACA;WACA;WACA;WACA;WACA;WACA;;WAEA;WACA;WACA;;;;;UEhDA;UACA;UACA;UACA;UACA","sources":["webpack://yutaka-test-order-infomation/./src/ts/kintone-env-dependent-char.ts","webpack://yutaka-test-order-infomation/ignored|/Users/takumi/Documents/kintone/yutaka-test-order-infomation/node_modules/object-inspect|./util.inspect","webpack://yutaka-test-order-infomation/webpack/bootstrap","webpack://yutaka-test-order-infomation/webpack/runtime/chunk loaded","webpack://yutaka-test-order-infomation/webpack/runtime/compat get default export","webpack://yutaka-test-order-infomation/webpack/runtime/define property getters","webpack://yutaka-test-order-infomation/webpack/runtime/global","webpack://yutaka-test-order-infomation/webpack/runtime/hasOwnProperty shorthand","webpack://yutaka-test-order-infomation/webpack/runtime/make namespace object","webpack://yutaka-test-order-infomation/webpack/runtime/jsonp chunk loading","webpack://yutaka-test-order-infomation/webpack/before-startup","webpack://yutaka-test-order-infomation/webpack/startup","webpack://yutaka-test-order-infomation/webpack/after-startup"],"sourcesContent":["import { KintoneRestAPIClient, KintoneRecordField } from \"@kintone/rest-api-client\";\n\n\n// リポジトリURL\n// https://github.com/takokke/yutaka-test-order-infomation\n\n(() => {\n    'use strict';\n    /* 定数の定義*/\n\n\n    // 末尾に[縺]を入れる\n    /* 関数の定義 */\n    const replaceNonJISCharacters = (input: string) => {\n\n        const nonJISRegex = /[^\\u0020-\\u007E\\u00A1-\\u00DF\\uFF61-\\uFF9F\\u3041-\\u3093\\u30A1-\\u30F6\\u30FB-\\u30FC\\u4E00-\\u9FA0\\u3000-\\u303F\\uFF01-\\uFF5E\\uFF10-\\uFF5E]/g;\n\n        // 置き換え文字を定義\n        let replacementCharacter = '[縺]';\n\n        return input.replace(nonJISRegex, replacementCharacter);\n    }\n\n    // 環境依存文字をチェックする関数\n    const containsNonJISCharacters =  (input: string)=>{\n        /* 定数の定義*/\n        const nonJISRegex = /[^\\u0020-\\u007E\\u00A1-\\u00DF\\uFF61-\\uFF9F\\u3041-\\u3093\\u30A1-\\u30F6\\u30FB-\\u30FC\\u4E00-\\u9FA0\\u3000-\\u303F\\uFF01-\\uFF5E\\uFF10-\\uFF5E]/g;\n        \n        // \\u0020-\\u007E: 基本的なASCII文字（空白や記号を含む）\n        // \\u00A1-\\u00DF: 半角カタカナとラテン文字の一部\n        // \\u3041-\\u3093: ひらがな\n        // \\u30A1-\\u30F6: カタカナ\n        // \\u30FB\\: \n        // \\u30FC\\:「ー」（長音符）\n        // \\u4E00-\\u9FA0: 漢字（CJK統合漢字）\n        // \\u3000-\\u303F: 句読点などの日本語の記号\n        // \\uFF01: ！\n        // \\uFF02: \"\n        // \\uFF03: #\n        // …\n        // \\uFF5E: ～（波ダッシュ)\n        // \\uFF10-\\uFF19: 全角の数字（０～９）\n        // \\uFF21-\\uFF3A: 全角のアルファベット（大文字 A～Z）\n        // \\uFF41-\\uFF5A: 全角のアルファベット（小文字 a～z）\n        // \\uFF5E: ～\n        // \\uFF61-\\uFF9F: 半角カタカナ\n\n       return nonJISRegex.test(input);\n    }\n\n    /* 型の定義 */ \n    interface KintoneEvent {\n        record: kintone.types.SavedFields;\n    }\n\n    // 参考記事\n    // https://github.com/kintone/js-sdk/blob/main/packages/rest-api-client/docs/typescript.md\n    type ShippingData = {\n        $id: KintoneRecordField.ID;\n        $revision: KintoneRecordField.Revision;\n        更新者: KintoneRecordField.Modifier;\n        作成者: KintoneRecordField.Creator;\n        レコード番号: KintoneRecordField.RecordNumber;\n        更新日時: KintoneRecordField.UpdatedTime;\n        作成日時: KintoneRecordField.CreatedTime;\n        備考: KintoneRecordField.MultiLineText;\n        プリントオプション代: KintoneRecordField.Number;\n        会員: KintoneRecordField.SingleLineText;\n        注文方法: KintoneRecordField.SingleLineText;\n        ポイント割引: KintoneRecordField.Number;\n        獲得ポイント: KintoneRecordField.Number;\n        名前差替代: KintoneRecordField.Number;\n        緊急連絡先: KintoneRecordField.SingleLineText;\n        電話番号: KintoneRecordField.SingleLineText;\n        ご利用について: KintoneRecordField.SingleLineText;\n        注文番号: KintoneRecordField.SingleLineText;\n        刷りサンプル: KintoneRecordField.SingleLineText;\n        担当者_姓_フリガナ: KintoneRecordField.SingleLineText;\n        担当者_姓: KintoneRecordField.SingleLineText;\n        Tシャツ合計: KintoneRecordField.Number;\n        掲載について: KintoneRecordField.SingleLineText;\n        型代: KintoneRecordField.Number;\n        住所2: KintoneRecordField.SingleLineText;\n        住所1: KintoneRecordField.SingleLineText;\n        支払方法: KintoneRecordField.SingleLineText;\n        修正: KintoneRecordField.Number;\n        送料合計: KintoneRecordField.Number;\n        分納数: KintoneRecordField.Number;\n        担当者_名_フリガナ: KintoneRecordField.SingleLineText;\n        メールアドレス: KintoneRecordField.SingleLineText;\n        タオル合計: KintoneRecordField.Number;\n        個人名_団体: KintoneRecordField.SingleLineText;\n        総額: KintoneRecordField.Number;\n        刺繍: KintoneRecordField.Number;\n        箱代: KintoneRecordField.Number;\n        郵便番号1: KintoneRecordField.SingleLineText;\n        郵便番号2: KintoneRecordField.SingleLineText;\n        担当者_名: KintoneRecordField.SingleLineText;\n        割引: KintoneRecordField.Number;\n        個人名_団体_フリガナ: KintoneRecordField.SingleLineText;\n        同時注文割引: KintoneRecordField.Number;\n        都道府県: KintoneRecordField.SingleLineText;\n        同時注文番号: KintoneRecordField.SingleLineText;\n        FAX: KintoneRecordField.SingleLineText;\n        ECCUBEリンク: KintoneRecordField.Link;\n        その他: KintoneRecordField.Number;\n    \n        注文商品チェックボックス: KintoneRecordField.CheckBox;\n        同時注文チェックボックス: KintoneRecordField.CheckBox;\n    }\n\n    // レコード詳細画面において、環境依存文字を含むフィールドを黄色にする\n    // まずは、全種類のフィールドを取得する必要がある。\n    kintone.events.on(\"app.record.detail.show\", (event: KintoneEvent)=> {\n\n      \n        try {\n            const record = event.record;\n            // フィールド名を配列で定義\n            const fieldCodes: (keyof kintone.types.SavedFields)[] = [\n              '住所1',\n              '住所2',\n              '個人名_団体',\n              '個人名_団体_フリガナ',\n              '担当者_名',\n              '担当者_名_フリガナ',\n              '担当者_姓',\n              '担当者_姓_フリガナ',\n              '都道府県'\n            ];\n\n            fieldCodes.forEach(fieldCode => {\n                const fieldValue = record[fieldCode]?.value;\n            \n                // console.log(`フィールド名: ${fieldCode}, 値: ${fieldValue}, 型: ${typeof fieldValue}`);\n            \n                if (fieldValue === null || typeof fieldValue !== 'string') {\n                    console.log(`${fieldCode} は値がnullまたは文字列ではありません。`);\n                    return;\n                }\n                \n                const containsNonJIS = containsNonJISCharacters(fieldValue);\n                const containsSpecialChar = fieldValue.includes(\"[縺]\");\n            \n                //console.log(`フィールド名: ${fieldCode}, Non-JIS: ${containsNonJIS}, 特殊文字: ${containsSpecialChar}`);\n            \n                if (containsNonJIS || containsSpecialChar) {\n                    let fieldElement = kintone.app.record.getFieldElement(fieldCode);\n                    if (fieldElement === null) {\n                        throw new Error(`フィールド \"${fieldCode}\" が見つかりません`);\n                    }\n                    fieldElement.style.backgroundColor = 'yellow';\n                }\n            });\n\n        } catch (err) {\n            if (err instanceof Error) {\n                console.error(err);\n                alert(err.message);\n            } else {\n                console.error(err);\n                alert(\"An unknown error occurred\");\n            }\n        }\n\n        \n\n\n        return event;\n    })\n    // レコード一覧画面\n    // 置き換えボタンを表示\n    kintone.events.on(\"app.record.index.show\", (event) => {\n\n        if (document.getElementById('replace_button') !== null) {\n          return false;\n        }\n        const button = document.createElement(\"button\");\n        button.id = \"replace_button\";\n        button.innerHTML = '<span></span>環境依存文字を置換する';\n        \n        button.onclick = async () => {\n            // 全レコードを取得\n\n            try {\n\n                document.getElementById(\"#replace_button\")?.classList.add(\"click\");\n\n                button.disabled = true;\n                \n                const client = new KintoneRestAPIClient({});\n                const APP_ID = kintone.app.getId();\n\n                if (APP_ID === null) {\n                    throw new Error(\"アプリIDが取得できませんでした。\");\n                }\n\n                const getAllRecordsParams = {\n                    app: APP_ID,\n                };\n                \n                const getAllRecordsResp = await client.record.getAllRecords<ShippingData>(getAllRecordsParams);\n                const nonJISRegex = /[^\\u0020-\\u007E\\u00A1-\\u00DF\\uFF61-\\uFF9F\\u3041-\\u3093\\u30A1-\\u30F6\\u30FB-\\u30FC\\u4E00-\\u9FA0\\u3000-\\u303F\\uFF01-\\uFF5E\\uFF10-\\uFF5E]/g;\n                \n                const targetRecords = await getAllRecordsResp.filter((record) => {\n                    return nonJISRegex.test(record.住所1.value) ||\n                        nonJISRegex.test(record.住所2.value) || \n                        nonJISRegex.test(record.個人名_団体.value) || \n                        nonJISRegex.test(record.個人名_団体_フリガナ.value) ||\n                        nonJISRegex.test(record.担当者_名.value) ||\n                        nonJISRegex.test(record.担当者_名_フリガナ.value) ||\n                        nonJISRegex.test(record.担当者_姓.value) ||\n                        nonJISRegex.test(record.担当者_姓_フリガナ.value) ||\n                        nonJISRegex.test(record.都道府県.value);\n                });\n\n                console.log(targetRecords);\n                \n                let updateRecords: any[] = [];\n                \n                // 更新する内容を作成\n                targetRecords.forEach((record) => {\n                    let updateRecord = {\n                        id: record.$id.value,\n                        record: {\n                            住所1: {\n                                value: replaceNonJISCharacters(record.住所1.value)\n                            },\n                            住所2: {\n                                value: replaceNonJISCharacters(record.住所2.value)\n                            },\n                            個人名_団体: {\n                                value: replaceNonJISCharacters(record.個人名_団体.value)\n                            },\n                            個人名_団体_フリガナ: {\n                                value: replaceNonJISCharacters(record.個人名_団体_フリガナ.value)\n                            },\n                            担当者_名: {\n                                value: replaceNonJISCharacters(record.担当者_名.value)\n                            },\n                            担当者_名_フリガナ: {\n                                value: replaceNonJISCharacters(record.担当者_名_フリガナ.value)\n                            },\n                            担当者_姓: {\n                                value: replaceNonJISCharacters(record.担当者_姓.value)\n                            },\n                            担当者_姓_フリガナ: {\n                                value: replaceNonJISCharacters(record.担当者_姓_フリガナ.value)\n                            },\n                            都道府県: {\n                                value: replaceNonJISCharacters(record.都道府県.value)\n                            }\n                        }\n                    };\n                    updateRecords.push(updateRecord);\n                });\n\n                console.log(updateRecords);\n\n                const updateAllRecordsParams = {\n                    app: APP_ID,\n                    records: updateRecords,\n                };\n                \n                await client.record.updateAllRecords(updateAllRecordsParams);\n                \n                // ボタン要素を取得\n                const replaceButton = document.getElementById(\"replace_button\");\n\n                // クラスを削除\n                if (replaceButton) {\n                    replaceButton.classList.remove(\"click\");\n                    // HTMLを更新\n                    replaceButton.innerHTML = \"<span></span>環境依存文字を置換する\";\n                }\n                button.disabled = false;\n                \n                alert(\"JIS非対応文字の置換が完了しました\");\n\n                location.reload();\n\n            } catch (err) {\n                if (err instanceof Error) {\n                    console.error(err);\n                    alert(err.message);\n                } else {\n                    console.error(err);\n                    alert(\"An unknown error occurred\");\n                }\n            }\n        };\n        \n        const headerMenuSpace = kintone.app.getHeaderMenuSpaceElement();\n        headerMenuSpace?.appendChild(button);\n        \n        return event;\n    });\n\n})();","/* (ignored) */","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"kintone-env-dependent-char\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkyutaka_test_order_infomation\"] = self[\"webpackChunkyutaka_test_order_infomation\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_kintone_rest-api-client_lib_src_index_browser_js\"], () => (__webpack_require__(\"./src/ts/kintone-env-dependent-char.ts\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":["_regeneratorRuntime","e","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","KintoneRestAPIClient","replaceNonJISCharacters","input","nonJISRegex","replacementCharacter","replace","containsNonJISCharacters","test","kintone","events","on","event","record","fieldCodes","fieldCode","_record$fieldCode","fieldValue","console","log","concat","containsNonJIS","containsSpecialChar","includes","fieldElement","app","getFieldElement","style","backgroundColor","err","error","alert","message","document","getElementById","button","createElement","id","innerHTML","onclick","_callee","_document$getElementB","client","APP_ID","getAllRecordsParams","getAllRecordsResp","targetRecords","updateRecords","updateAllRecordsParams","replaceButton","_callee$","_context","classList","add","disabled","getId","getAllRecords","filter","住所1","住所2","個人名_団体","個人名_団体_フリガナ","担当者_名","担当者_名_フリガナ","担当者_姓","担当者_姓_フリガナ","都道府県","updateRecord","$id","records","updateAllRecords","remove","location","reload","t0","headerMenuSpace","getHeaderMenuSpaceElement","appendChild"],"sourceRoot":""}